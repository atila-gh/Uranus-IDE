import os
from datetime import datetime
from PyQt5.QtWidgets import (
    QDialog, QVBoxLayout, QFormLayout, QLineEdit, QComboBox,
    QTextEdit, QPushButton, QMessageBox
)



class ProjectInfoDialog(QDialog):
    """
        A dialog for collecting project metadata and generating a structured project folder.

        Features:
        - Collects author name, project description, and license type.
        - Creates a standardized folder hierarchy including notebooks, data, scripts, models, and docs.
        - Generates initial files such as README.md, LICENSE, requirements.txt, and placeholder notebooks.
        - Supports multiple license templates (MIT, Apache 2.0, GPL v3, BSD 3-Clause).

        Parameters:
        - project_name (str): Name of the project to be created.
        - target_folder (str): Path where the project folder will be generated.
        - parent (QWidget): Optional parent widget.

        Methods:
        - create_project(): Validates input and generates folders and files.
        - get_license_text(): Returns license text based on selected type, author, and year.

        Usage:
        This dialog is typically invoked from the main window when creating a new project.
        It ensures consistent structure and metadata for reproducible workflows.
        """

    def __init__(self, project_name, target_folder, parent=None):
        super().__init__(parent)
        self.project_name = project_name
        self.target_folder = target_folder
        self.setWindowTitle("Project Information")
        self.setMinimumWidth(420)

        layout = QVBoxLayout(self)
        form = QFormLayout()

        self.author_input = QLineEdit()
        self.description_input = QTextEdit()
        self.license_input = QComboBox()
        self.license_input.addItems(["MIT", "Apache 2.0", "GPL v3", "BSD 3-Clause"])

        form.addRow("Author:", self.author_input)
        form.addRow("Description:", self.description_input)
        form.addRow("License:", self.license_input)

        layout.addLayout(form)

        self.create_btn = QPushButton("Create Project")
        self.create_btn.clicked.connect(self.create_project)
        layout.addWidget(self.create_btn)

    def create_project(self):
        author = self.author_input.text().strip()
        description = self.description_input.toPlainText().strip()
        license_type = self.license_input.currentText()
        date_today = datetime.now().strftime("%Y-%m-%d")
        year = date_today[:4]

        if not author:
            QMessageBox.warning(self, "Missing Info", "Please enter the author name.")
            return

        base_path = os.path.join(self.target_folder)
        folders = [
            f"{base_path}/{self.project_name}/notebooks",
            f"{base_path}/{self.project_name}/data/raw",
            f"{base_path}/{self.project_name}/data/processed",
            f"{base_path}/{self.project_name}/scripts",
            f"{base_path}/{self.project_name}/models",
            f"{base_path}/{self.project_name}/docs"
        ]
        for folder in folders:
            os.makedirs(folder, exist_ok=True)

        license_text = self.get_license_text(license_type, author, year)

        files = {
            f"{base_path}/{self.project_name}/README.md": f"""# {self.project_name}

    **Author:** {author}  
    **Created on:** {date_today}  

    ## Description  
    {description}

    ## License  
    See [LICENSE](LICENSE) for details.
    """,
            f"{base_path}/{self.project_name}/LICENSE": license_text,
            f"{base_path}/{self.project_name}/requirements.txt": "# List required Python packages here.\n# Each line should contain one package, optionally with version.\n",
            f"{base_path}/{self.project_name}/notebooks/README.md": "# Place Jupyter notebooks (.ipynb) here.\n# Each notebook should represent a distinct analysis or experiment.\n",
            f"{base_path}/{self.project_name}/notebooks/{self.project_name}.ipynb": "",
            f"{base_path}/{self.project_name}/data/raw/README.md": "# Store raw, unprocessed data files here.\n# Avoid modifying these files directly.\n",
            f"{base_path}/{self.project_name}/data/processed/README.md": "# Store cleaned and transformed data here.\n# These files are typically generated by scripts.\n",
            f"{base_path}/{self.project_name}/scripts/utils.py": "# Utility functions for data processing, visualization, or modeling.\n# Import this module in notebooks or other scripts.\n",
            f"{base_path}/{self.project_name}/models/README.md": "# Store trained models here (e.g., .pkl, .h5).\n# Include metadata or versioning info if needed.\n",
            f"{base_path}/{self.project_name}/docs/index.md": f"# Documentation for {self.project_name}\n\nInclude project overview, setup instructions, and usage examples.\n"
        }

        for path, content in files.items():
            with open(path, "w", encoding="utf-8") as f:
                f.write(content)

        QMessageBox.information(self, "Success", f"âœ… Project '{self.project_name}' created at:\n{base_path}")
        self.accept()


    @staticmethod
    def get_license_text(license_type, author, year):
        if license_type == "MIT":
            return f"""MIT License

Copyright (c) {year} {author}

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction...

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND...
"""
        elif license_type == "Apache 2.0":
            return f"""Apache License 2.0

Copyright {year} {author}

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License...

Distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND...
"""
        elif license_type == "GPL v3":
            return f"""GNU GENERAL PUBLIC LICENSE Version 3

Copyright (C) {year} {author}

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License...

WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY...
"""
        elif license_type == "BSD 3-Clause":
            return f"""BSD 3-Clause License

Copyright (c) {year}, {author}
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted...

THIS SOFTWARE IS PROVIDED "AS IS", AND ANY EXPRESS OR IMPLIED WARRANTIES ARE DISCLAIMED...
"""
        else:
            return "No license selected."